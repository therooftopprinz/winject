Type RRC_BOOL
{
    type(unsigned) width(8)
};

Type RRC_U8
{
    type(unsigned) width(8)
};

Type RRC_U8A
{
    type(u8) dynamic_array(256)
};

Type RRC_U16
{
    type(unsigned) width(16)
};

Type RRC_U32
{
    type(unsigned) width(64)
};

Type RRC_U64
{
    type(unsigned) width(64)
};



Type RRC_STR
{
    type(asciiz)
};

Enumeration RRC_FECType
{
    E_RRC_FECType_RS_NONE,
    E_RRC_FECType_RS_255_247,
    E_RRC_FECType_RS_255_239,
    E_RRC_FECType_RS_255_223,
    E_RRC_FECType_RS_255_191,
    E_RRC_FECType_RS_255_127
};

Sequence RRC_FECConfig
{
    RRC_FECType type,
    RRC_U32 threshold
};

Type RRC_FECConfigList
{
    type(RRC_FECConfig) dynamic_array(256)
};

Sequence RRC_FrameConfig
{
    RRC_U64 slotInterval,
    RRC_FECConfigList fecConfig
};

Enumeration RRC_LLCTxMode
{
    E_RRC_LLCTxMode_TM,
    E_RRC_LLCTxMode_AM
}

Enumeration RRC_LLCCRCType
{
    E_RRC_LLCCRCType_NONE,
    E_RRC_LLCCRCType_CRC32_04C11DB7
};

Sequence RRC_LLCTxConfig
{
    RRC_LLCTxMode mode,
    RRC_U16 arqWindowSize,
    RRC_LLCCRCType crcType
};

Sequence RRC_SchedulingConfig
{
    RRC_U16 nd_gpdu_max_size,
    RRC_U16 quanta
};

Sequence RRC_LLCConfig
{
    RRC_U8 llcid,
    RRC_LLCTxConfig txConfig,
    RRC_SchedulingConfig scheduling_config
};

Enumeration RRC_EPType
{
    E_RRC_EPType_INTERNAL
    E_RRC_EPType_UDP,
    E_RRC_EPType_UART,
    E_RRC_EPType_TUN
};

Enumeration RRC_CipherAlgorithm
{
    E_RRC_CipherAlgorithm_NONE,
    E_RRC_CipherAlgorithm_AES128_CBC
};

Enumeration RRC_IntegrityAlgorithm
{
    E_RRC_CipherAlgorithm_NONE,
    E_RRC_CipherAlgorithm_HMAC_SHA1
};

Enumeration RRC_CompressionAlgorithm
{
    RRC_CompressionAlgorithm_NONE,
    RRC_CompressionAlgorithm_ZLIB
};

Sequence RRC_PDCPConfig
{
    RRC_U8 pdcpid,
    RRC_U8 linkedLcid,
    RRC_BOOL allow_segmentation,
    RRC_U16 min_commit_size,
    RRC_U8A cipher_key,
    RRC_U8A integrity_key,
    RRC_CipherAlgorithm cipherAlgorithm,
    RRC_IntegrityAlgorithm integrityAlgorithm,
    RRC_CompressionAlgorithm compressionAlgorithm,
    U8 compressionLevel,
    RRC_EPType type,
    RRC_STR address
};

Sequence RRC_PullRequest
{
    RRC_BOOL includeFrameConfig,
    RRC_BOOL includeLLCConfig,
    RRC_BOOL includePDCPConfig,
    RRC_U8A lcids
};

Type RRC_FrameConfigOptional
{
    type(RRC_FrameConfig) optional()
};

Type RRC_LLCConfigOptional
{
    type(RRC_LLCConfig) optional()
};

Type RRC_PDCPConfigOptional
{
    type(RRC_PDCPConfig) optional()
};

Sequence RRC_PullResponse
{
    RRC_FrameConfigOptional frameConfig,
    RRC_LLCConfigOptional llcConfig,
    RRC_PDCPConfigOptional pdcpConfig
};

Sequence RRC_PushRequest
{
    RRC_FrameConfigOptional frameConfig,
    RRC_LLCConfigOptional llcConfig,
    RRC_PDCPConfigOptional pdcpConfig
};

Sequence RRC_PushResponse
{
    RRC_U8 spare
};

Sequence RRC_ActivateRequest
{
    RRC_U8 llcid,
    RRC_BOOL isTxActive
    RRC_BOOL isRxActive
};

Sequence RRC_ActivateResponse
{
    RRC_U8 spare
};

Choice RRC_Message
{
    RRC_PullRequest,
    RRC_PullResponse,
    RRC_PushRequest,
    RRC_PushResponse,
    RRC_ActivateRequest,
    RRC_ActivateResponse,
};

Sequence RRC
{
    U8 requestID,
    RRC_Message message
}